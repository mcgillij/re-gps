# AUTOGENERATED! DO NOT EDIT! File to edit: ../02_date_compare.ipynb.

# %% auto 0
__all__ = ['ImageGPS', 'to_timestamp', 'delta_to_minutes', 'get_time_delta', 'get_smallest_deltas', 'convert_to_decimal',
           'de_google_gps_info', 'write_gps_info_to_images']

# %% ../02_date_compare.ipynb 3
from bisect import bisect
from collections import namedtuple
import pathlib

from .json_explorer import *
from .exif_explorer import *
from GPSPhoto import gpsphoto

# %% ../02_date_compare.ipynb 9
from datetime import datetime
def to_timestamp(date):
    date_format = "%Y:%m:%d %H:%M:%S"
    timestamp = datetime.strptime(date, date_format)
    return int(timestamp.timestamp())

# %% ../02_date_compare.ipynb 12
def delta_to_minutes(delta):
    return int(delta.total_seconds() // 60)

def get_time_delta(a, b):
    a = datetime.fromtimestamp(a)
    b = datetime.fromtimestamp(b)
    if a > b:
        return delta_to_minutes(a - b)
    return delta_to_minutes(b - a)

# %% ../02_date_compare.ipynb 20
# optimized solution
def get_smallest_deltas(image_list, locations):
    d = {}
    location_timestamps = [l.timestamp for l in locations]
    for image_index, image in enumerate(image_list):
        image_timestamp = to_timestamp(image.exif.get("datetime_original"))
        
        index = bisect(location_timestamps, image_timestamp)
        if index == len(location_timestamps):
            index = index -1
        delta = get_time_delta(image_timestamp, locations[index].timestamp) 
        d[image_index] = index
    return d
    

# %% ../02_date_compare.ipynb 23
# de-google lat/long

# new data structure to hold images w gps metadata
ImageGPS = namedtuple("ImageGPS", ["image_path", "gps"])

def convert_to_decimal(lat, long):
    # 1e7 is the value to divide by to convert from latitudeE7/longitudeE7 fields
    return lat/1e7, long/1e7


def de_google_gps_info(d, image_list, locations):
    imgs_w_data = []
    for image_index, location_index in d.items():
        image_time = to_timestamp(image_list[image_index].exif.get("datetime_original"))
        location_time = locations[location_index].timestamp
        delta = get_time_delta(image_time, location_time)
        lat, long = convert_to_decimal(locations[location_index].latitude, locations[location_index].longitude)
        imgs_w_data.append(ImageGPS(image_list[image_index].image_path, (lat, long)))
    return imgs_w_data

# %% ../02_date_compare.ipynb 26
def write_gps_info_to_images(image_list, output_path):
    for image in image_list:
        info = gpsphoto.GPSInfo(image.gps)
        photo = gpsphoto.GPSPhoto(image.image_path)
        filename = pathlib.Path(image.image_path).name
        photo.modGPSData(info, f'{output_path}/{filename}')
