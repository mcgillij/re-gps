# AUTOGENERATED! DO NOT EDIT! File to edit: ../02_date_compare.ipynb.

# %% auto 0
__all__ = ['to_timestamp', 'delta_to_minutes', 'get_time_delta', 'get_smallest_deltas']

# %% ../02_date_compare.ipynb 3
from .json_explorer import *
from .exif_explorer import *

# %% ../02_date_compare.ipynb 9
from datetime import datetime
def to_timestamp(date):
    date_format = "%Y:%m:%d %H:%M:%S"
    timestamp = datetime.strptime(date, date_format)
    return int(timestamp.timestamp())

# %% ../02_date_compare.ipynb 12
def delta_to_minutes(delta):
    return int(delta.total_seconds() // 60)

def get_time_delta(a, b):
    a = datetime.fromtimestamp(a)
    b = datetime.fromtimestamp(b)
    if a > b:
        return delta_to_minutes(a - b)
    return delta_to_minutes(b - a)

# %% ../02_date_compare.ipynb 20
from collections import defaultdict

# bruteforce implementation, this can be optimized later since it's operating on sorted lists
def get_smallest_deltas(image_list, locations):
    d = {}
    for image_index, image in enumerate(image_list):
        current_delta = 99999999999
        for location_index, location in enumerate(locations_w_gps):
            
            # find the delta and store the smallest values index
            delta = get_time_delta(
                to_timestamp(image.exif.get("datetime_original")),
                location.timestamp)
            if delta < current_delta:
                current_delta = delta
                d[image_index] = location_index
    return d
