# AUTOGENERATED! DO NOT EDIT! File to edit: ../02_date_compare.ipynb.

# %% auto 0
__all__ = ['ImageGPS', 'to_timestamp', 'delta_to_minutes', 'get_time_delta', 'get_smallest_deltas2', 'get_smallest_deltas',
           'convert_to_decimal', 'de_google_gps_info', 'write_gps_info_to_images']

# %% ../02_date_compare.ipynb 3
from .json_explorer import *
from .exif_explorer import *

# %% ../02_date_compare.ipynb 9
from datetime import datetime
def to_timestamp(date):
    date_format = "%Y:%m:%d %H:%M:%S"
    timestamp = datetime.strptime(date, date_format)
    return int(timestamp.timestamp())

# %% ../02_date_compare.ipynb 12
def delta_to_minutes(delta):
    return int(delta.total_seconds() // 60)

def get_time_delta(a, b):
    a = datetime.fromtimestamp(a)
    b = datetime.fromtimestamp(b)
    if a > b:
        return delta_to_minutes(a - b)
    return delta_to_minutes(b - a)

# %% ../02_date_compare.ipynb 20
from collections import defaultdict

# This implementation takes 25mins~ to process 100 images X 300mbs of json
# bruteforce implementation, this can be optimized later since it's operating on sorted lists
def get_smallest_deltas2(image_list, locations):
    d = {}
    for image_index, image in enumerate(image_list):
        current_delta = 99999999999
        for location_index, location in enumerate(locations_w_gps):
            # find the delta and store the smallest values index
            delta = get_time_delta(
                to_timestamp(image.exif.get("datetime_original")),
                location.timestamp
            )
            
            if delta < current_delta:
                current_delta = delta
                d[image_index] = location_index
    return d

# this implementation takes under a second
from bisect import bisect
def get_smallest_deltas(image_list, locations):
    d = {}
    location_timestamps = [location.timestamp for location in locations]
    for image_index, image in enumerate(image_list):
        image_timestamp = to_timestamp(image.exif.get("datetime_original"))
        index = bisect(location_timestamps, image_timestamp)
        delta1 = get_time_delta(image_timestamp, locations[index].timestamp)
        delta2 = get_time_delta(image_timestamp, locations[index+1].timestamp)
        if delta1 > delta2:
            index = index + 1
        d[image_index] = index
    return d
    

# %% ../02_date_compare.ipynb 23
# de-google lat/long

def convert_to_decimal(lat, long):
    # 1e7 is the value to divide by to convert from latitudeE7/longitudeE7 fields
    return lat/1e7, long/1e7

# new data structure to hold images w gps metadata
from collections import namedtuple
ImageGPS = namedtuple("ImageGPS", ["image_path", "gps"])

def de_google_gps_info(d):
    imgs_w_data = []
    for image_index, location_index in d.items():
        image_time = to_timestamp(image_list[image_index].exif.get("datetime_original"))
        location_time = locations_w_gps[location_index].timestamp
        delta = get_time_delta(image_time, location_time)
        lat, long = convert_to_decimal(locations_w_gps[location_index].latitude, locations_w_gps[location_index].longitude)
        imgs_w_data.append(ImageGPS(image_list[image_index].image_path, (lat, long)))
    return imgs_w_data

# %% ../02_date_compare.ipynb 26
from GPSPhoto import gpsphoto

def write_gps_info_to_images():
    info = gpsphoto.GPSInfo((36.1230049, -115.1653861))
    photo = gpsphoto.GPSPhoto(images_and_data[0].image_path)
    photo.modGPSData(info, 'output/newFile.jpg')

